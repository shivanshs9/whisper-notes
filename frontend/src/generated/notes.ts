// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "notes.proto" (package "notes", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message notes.Note
 */
export interface Note {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string audio = 2;
     */
    audio: string;
    /**
     * @generated from protobuf field: string transcription = 3;
     */
    transcription: string;
}
/**
 * @generated from protobuf message notes.CreateNoteRequest
 */
export interface CreateNoteRequest {
    /**
     * @generated from protobuf field: string audio = 1;
     */
    audio: string;
    /**
     * @generated from protobuf field: string transcription = 2;
     */
    transcription: string;
}
/**
 * @generated from protobuf message notes.CreateNoteResponse
 */
export interface CreateNoteResponse {
    /**
     * @generated from protobuf field: string status = 1;
     */
    status: string;
    /**
     * @generated from protobuf field: string errorMessage = 2;
     */
    errorMessage: string;
    /**
     * @generated from protobuf field: notes.Note note = 3;
     */
    note?: Note;
}
/**
 * @generated from protobuf message notes.ListNotesRequest
 */
export interface ListNotesRequest {
}
/**
 * @generated from protobuf message notes.ListNotesResponse
 */
export interface ListNotesResponse {
    /**
     * @generated from protobuf field: repeated notes.Note notes = 1;
     */
    notes: Note[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Note$Type extends MessageType<Note> {
    constructor() {
        super("notes.Note", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transcription", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Note>): Note {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.audio = "";
        message.transcription = "";
        if (value !== undefined)
            reflectionMergePartial<Note>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Note): Note {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string audio */ 2:
                    message.audio = reader.string();
                    break;
                case /* string transcription */ 3:
                    message.transcription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Note, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string audio = 2; */
        if (message.audio !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.audio);
        /* string transcription = 3; */
        if (message.transcription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transcription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notes.Note
 */
export const Note = new Note$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNoteRequest$Type extends MessageType<CreateNoteRequest> {
    constructor() {
        super("notes.CreateNoteRequest", [
            { no: 1, name: "audio", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transcription", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateNoteRequest>): CreateNoteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.audio = "";
        message.transcription = "";
        if (value !== undefined)
            reflectionMergePartial<CreateNoteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNoteRequest): CreateNoteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string audio */ 1:
                    message.audio = reader.string();
                    break;
                case /* string transcription */ 2:
                    message.transcription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNoteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string audio = 1; */
        if (message.audio !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.audio);
        /* string transcription = 2; */
        if (message.transcription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transcription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notes.CreateNoteRequest
 */
export const CreateNoteRequest = new CreateNoteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNoteResponse$Type extends MessageType<CreateNoteResponse> {
    constructor() {
        super("notes.CreateNoteResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "errorMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "note", kind: "message", T: () => Note }
        ]);
    }
    create(value?: PartialMessage<CreateNoteResponse>): CreateNoteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.errorMessage = "";
        if (value !== undefined)
            reflectionMergePartial<CreateNoteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNoteResponse): CreateNoteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                case /* string errorMessage */ 2:
                    message.errorMessage = reader.string();
                    break;
                case /* notes.Note note */ 3:
                    message.note = Note.internalBinaryRead(reader, reader.uint32(), options, message.note);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNoteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string errorMessage = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        /* notes.Note note = 3; */
        if (message.note)
            Note.internalBinaryWrite(message.note, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notes.CreateNoteResponse
 */
export const CreateNoteResponse = new CreateNoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNotesRequest$Type extends MessageType<ListNotesRequest> {
    constructor() {
        super("notes.ListNotesRequest", []);
    }
    create(value?: PartialMessage<ListNotesRequest>): ListNotesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListNotesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNotesRequest): ListNotesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListNotesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notes.ListNotesRequest
 */
export const ListNotesRequest = new ListNotesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNotesResponse$Type extends MessageType<ListNotesResponse> {
    constructor() {
        super("notes.ListNotesResponse", [
            { no: 1, name: "notes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Note }
        ]);
    }
    create(value?: PartialMessage<ListNotesResponse>): ListNotesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notes = [];
        if (value !== undefined)
            reflectionMergePartial<ListNotesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNotesResponse): ListNotesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated notes.Note notes */ 1:
                    message.notes.push(Note.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNotesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated notes.Note notes = 1; */
        for (let i = 0; i < message.notes.length; i++)
            Note.internalBinaryWrite(message.notes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notes.ListNotesResponse
 */
export const ListNotesResponse = new ListNotesResponse$Type();
/**
 * @generated ServiceType for protobuf service notes.NoteService
 */
export const NoteService = new ServiceType("notes.NoteService", [
    { name: "CreateNote", options: {}, I: CreateNoteRequest, O: CreateNoteResponse },
    { name: "ListNotes", options: {}, I: ListNotesRequest, O: ListNotesResponse }
]);
